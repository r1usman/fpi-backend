{
	"info": {
		"_postman_id": "24a76c72-2593-4d86-bf04-170cb15cd30c",
		"name": "FPI_BACKEND",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44629762"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Student4 User\",\n  \"email\": \"student4@example.com\",\n  \"password\": \"Student4\",\n  \"profileImageUrl\": \"https://example.com/admin.png\",\n  \"role\": \"Student\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/Auth/register"
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"student4@example.com\",\n  \"password\": \"Student4\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/Auth/login"
					},
					"response": []
				},
				{
					"name": "Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZDg3MjYxMjE2MDJmMWM1MDkyYjM4NyIsIm5hbWUiOiJBZG1pbiBVc2VyIiwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJFNqVVFUVm9ZZVR5M3dNd0pkY2wuVk9pSGRqM2szUklLUDJKS2tsM3B5ZC9EVXpyZWljdGtXIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJBZG1pbiIsInN1Ym1pc3Npb25zIjpbXSwiY3JlYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwidXBkYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwiX192IjowfSwiaWF0IjoxNzU5MDE1NTMzLCJleHAiOjE3NTk2MjAzMzN9.Gg9KnKf_I1YlhW6zd3CG5LWt0_S8Cr0E8MLa7nMYRQ0"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:3000/Auth/profile"
					},
					"response": []
				}
			]
		},
		{
			"name": "Single Problems",
			"item": [
				{
					"name": "General Problem Access",
					"item": [
						{
							"name": "Get All Problems",
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:3000/api/problems"
							},
							"response": []
						},
						{
							"name": "Get personalized Problems",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZTEyMDUyMmU0Nzc3MDFjMTY0ZDhkNiIsIm5hbWUiOiJTdHVkZW50NCBVc2VyIiwiZW1haWwiOiJzdHVkZW50NEBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJEFjWHpXeU9QdEk1Y2JWekc3c1cxR09rWUZPckNadGRCb3JqWWVPUlVLR0phSmRZbFB3eWFDIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJTdHVkZW50Iiwic3VibWlzc2lvbnMiOltdLCJwcmVmZXJyZWREaWZmaWN1bHR5IjoiRUFTWSIsInNvbHZlZFByb2JsZW1zIjpbXSwic29sdmVkQ291bnQiOjAsImRpZmZpY3VsdHlTY29yZVN1bSI6MCwicHJlZmVycmVkVGFncyI6W10sImNyZWF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsInVwZGF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsIl9fdiI6MH0sImlhdCI6MTc1OTU4NDM1MSwiZXhwIjoxNzYwMTg5MTUxfQ.1YChQ0eRWTBmGhp1ijh5oWMzLfqQFkC7BE9QsHGATeM"
									}
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:3000/api/problems/personalized"
							},
							"response": []
						},
						{
							"name": "get Specific Problem",
							"request": {
								"method": "GET",
								"header": [],
								"url": "http://localhost:3000/api/problems/68e106b20ce06941bce29a8b"
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin Problem CRUD",
					"item": [
						{
							"name": "Delete Problem",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": "http://localhost:4000/api/problems/68c041ac0203a6a9b4102c74"
							},
							"response": []
						},
						{
							"name": "Delete Solution",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4YzAxODI0ZWVlMDU5MzUxZTU2ZmJjZiIsIm5hbWUiOiJhIiwiZW1haWwiOiJhQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmIkMTAkZ3BTbGc1Y3AwZy5kZW4yVDEud09pT1Fva2hSQjRvcnRaY2Jmdk9qaGJtZDMzYXYyMmxCbFMiLCJzdGF0dXMiOiJBZG1pbiIsInN1Ym1pc3Npb25zIjpbXSwiY3JlYXRlZEF0IjoiMjAyNS0wOS0wOVQxMjowNTo1Ni45NzVaIiwidXBkYXRlZEF0IjoiMjAyNS0wOS0wOVQxMjowNTo1Ni45NzVaIiwiX192IjowfSwiaWF0IjoxNzU3NDE5NTg0LCJleHAiOjE3NTgwMjQzODR9.7LJFSzXvMjkAcs8XYo9McZQk1zmG5ORH1MIGiu1gnzQ"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "http://localhost:4000/api/problems/solutions/68c043270203a6a9b4102c7b"
							},
							"response": []
						},
						{
							"name": "Add Problem",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZGY4MTQyYjdlOTNkNWEzMDI5OWEyMiIsIm5hbWUiOiJBZG1pbjIgVXNlciIsImVtYWlsIjoiYWRtaW4yQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkRDFTZWhKWXdJbi9tRTFxaTRkWURWT25aYUlwOC9mU093N0ZYZG4yWEhadWsvbEM5NHFUT20iLCJwcm9maWxlSW1hZ2UiOiJodHRwczovL2V4YW1wbGUuY29tL2FkbWluLnBuZyIsInN0YXR1cyI6IkFkbWluIiwic3VibWlzc2lvbnMiOltdLCJjcmVhdGVkQXQiOiIyMDI1LTEwLTAzVDA3OjU0OjQyLjQ1MloiLCJ1cGRhdGVkQXQiOiIyMDI1LTEwLTAzVDA3OjU0OjQyLjQ1MloiLCJfX3YiOjB9LCJpYXQiOjE3NTk0Nzg5MzUsImV4cCI6MTc2MDA4MzczNX0.I4zXJyQBPRVibEI1_D8mje6vdTkhKet8WR9_SGTv3zc"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"difficulty\": \"EASY\",\n  \"name\": \"Find the Maximum\",\n  \"source\": \"custom\",\n  \"url\": \"https://example.com/problems/find-maximum\",\n  \"description\": \"Given an array of integers, find and print the maximum element.\",\n  \"input\": \"The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers.\",\n  \"output\": \"Print a single integer — the maximum element in the array.\",\n  \"note\": \"Simple implementation problem.\",\n  \"examples\": [\n    {\n      \"input\": \"5\\n1 7 3 9 2\",\n      \"output\": \"9\",\n      \"explanation\": \"The maximum among 1, 7, 3, 9, 2 is 9.\"\n    }\n  ],\n  \"raw_tags\": [\"array\", \"implementation\"],\n  \"tags\": [\"Arrays\", \"Implementation\"],\n  \"skill_types\": [\"Basic Programming\"],\n  \"expected_time_complexity\": \"O(n)\",\n  \"expected_auxiliary_space\": \"O(1)\",\n  \"time_limit\": \"1 second\",\n  \"memory_limit\": \"256 megabytes\",\n  \"date\": \"2025-09-28\",\n  \"picture_num\": \"0\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/problems"
							},
							"response": []
						},
						{
							"name": "Add Solution",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZGY4MTQyYjdlOTNkNWEzMDI5OWEyMiIsIm5hbWUiOiJBZG1pbjIgVXNlciIsImVtYWlsIjoiYWRtaW4yQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkRDFTZWhKWXdJbi9tRTFxaTRkWURWT25aYUlwOC9mU093N0ZYZG4yWEhadWsvbEM5NHFUT20iLCJwcm9maWxlSW1hZ2UiOiJodHRwczovL2V4YW1wbGUuY29tL2FkbWluLnBuZyIsInN0YXR1cyI6IkFkbWluIiwic3VibWlzc2lvbnMiOltdLCJjcmVhdGVkQXQiOiIyMDI1LTEwLTAzVDA3OjU0OjQyLjQ1MloiLCJ1cGRhdGVkQXQiOiIyMDI1LTEwLTAzVDA3OjU0OjQyLjQ1MloiLCJfX3YiOjB9LCJpYXQiOjE3NTk0Nzg5MzUsImV4cCI6MTc2MDA4MzczNX0.I4zXJyQBPRVibEI1_D8mje6vdTkhKet8WR9_SGTv3zc"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"MOD = 10**9 + 7\\ns = input().strip()\\n# Updated DP solution\\nprint(\\\"Updated Answer\\\")\",\n  \"language\": \"python\",\n  \"solutionNumber\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/problems/68d881f28d787509e980dc16/solutions"
							},
							"response": []
						},
						{
							"name": "Update Problem",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZDg3MjYxMjE2MDJmMWM1MDkyYjM4NyIsIm5hbWUiOiJBZG1pbiBVc2VyIiwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJFNqVVFUVm9ZZVR5M3dNd0pkY2wuVk9pSGRqM2szUklLUDJKS2tsM3B5ZC9EVXpyZWljdGtXIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJBZG1pbiIsInN1Ym1pc3Npb25zIjpbXSwiY3JlYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwidXBkYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwiX192IjowfSwiaWF0IjoxNzU5MDE4ODQzLCJleHAiOjE3NTk2MjM2NDN9.gDqM0mIUucNdBmazmXviVG014H5QiUmx_SlaIzb8PT0"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"difficulty\": \"MEDIUM\",\n  \"name\": \"Find the Maximum\",\n  \"source\": \"custom\",\n  \"url\": \"https://example.com/problems/find-maximum\",\n  \"description\": \"Given an array of integers, find and print the maximum element.\",\n  \"input\": \"The first line contains an integer n (1 ≤ n ≤ 100). The second line contains n integers.\",\n  \"output\": \"Print a single integer — the maximum element in the array.\",\n  \"note\": \"Simple implementation problem.\",\n  \"examples\": [\n    {\n      \"input\": \"5\\n1 7 3 9 2\",\n      \"output\": \"9\",\n      \"explanation\": \"The maximum among 1, 7, 3, 9, 2 is 9.\"\n    }\n  ],\n  \"raw_tags\": [\"array\", \"implementation\"],\n  \"tags\": [\"Arrays\", \"Implementation\"],\n  \"skill_types\": [\"Basic Programming\"],\n  \"expected_time_complexity\": \"O(n)\",\n  \"expected_auxiliary_space\": \"O(1)\",\n  \"time_limit\": \"1 second\",\n  \"memory_limit\": \"256 megabytes\",\n  \"date\": \"2025-09-28\",\n  \"picture_num\": \"0\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/problems/68d881f28d787509e980dc16"
							},
							"response": []
						},
						{
							"name": "Update Solution",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZDg3MjYxMjE2MDJmMWM1MDkyYjM4NyIsIm5hbWUiOiJBZG1pbiBVc2VyIiwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJFNqVVFUVm9ZZVR5M3dNd0pkY2wuVk9pSGRqM2szUklLUDJKS2tsM3B5ZC9EVXpyZWljdGtXIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJBZG1pbiIsInN1Ym1pc3Npb25zIjpbXSwiY3JlYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwidXBkYXRlZEF0IjoiMjAyNS0wOS0yN1QyMzoyNToyMS45NDFaIiwiX192IjowfSwiaWF0IjoxNzU5MDE4ODQzLCJleHAiOjE3NTk2MjM2NDN9.gDqM0mIUucNdBmazmXviVG014H5QiUmx_SlaIzb8PT0"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"MOD = 10**9 + 7\\ns = input().strip()\\n# Updated DP solution\\nprint(\\\"Updated Answer 2\\\")\",\n  \"language\": \"python\",\n  \"solutionNumber\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/problems/solutions/68d8823b8d787509e980dc19"
							},
							"response": []
						},
						{
							"name": "Add bulk",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"problem\": {\n      \"difficulty\": \"MEDIUM\",\n      \"name\": \"Benches\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/630/H\",\n      \"description\": \"The city park of IT City contains n east to west paths and n north to south paths. Each east to west path crosses each north to south path, so there are n^2 intersections.\\n\\nThe city funded purchase of five benches. To make it seems that there are many benches it was decided to place them on as many paths as possible. Obviously this requirement is satisfied by the following scheme: each bench is placed on a cross of paths and each path contains not more than one bench.\\n\\nHelp the park administration count the number of ways to place the benches.\",\n      \"input\": \"The only line of the input contains one integer n (5 ≤ n ≤ 100) — the number of east to west paths and north to south paths.\",\n      \"output\": \"Output one integer — the number of ways to place the benches.\",\n      \"note\": \"\",\n      \"examples\": [\n        {\n          \"input\": \"5\",\n          \"output\": \"120\",\n          \"explanation\": \"For n=5, there are 120 ways to place the benches.\"\n        }\n      ],\n      \"raw_tags\": [\"combinatorics\", \"math\"],\n      \"tags\": [\"Combinatorics\", \"Mathematics\"],\n      \"skill_types\": [],\n      \"expected_time_complexity\": \"O(1)\",\n      \"expected_auxiliary_space\": \"O(1)\",\n      \"time_limit\": null,\n      \"memory_limit\": null,\n      \"date\": \"2019-12-31\",\n      \"picture_num\": null\n    },\n    \"solutions\": [\n      {\n        \"code\": \"n = int(input().strip())\\nc5 = n * (n-1) * (n-2) * (n-3) * (n-4) // 120\\nresult = 120 * c5 * c5\\nprint(result)\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nrl.on('line', (n) => {\\n    n = BigInt(n);\\n    let c5 = n * (n-1n) * (n-2n) * (n-3n) * (n-4n) / 120n;\\n    console.log((120n * c5 * c5).toString());\\n});\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        long n = sc.nextLong();\\n        long c5 = n * (n-1) * (n-2) * (n-3) * (n-4) / 120;\\n        System.out.println(120 * c5 * c5);\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\nusing namespace std;\\nlong long C(long long n) { \\n    return n * (n-1) * (n-2) * (n-3) * (n-4) / 120; \\n}\\nint main() {\\n    long long n; \\n    cin >> n;\\n    cout << 120 * C(n) * C(n);\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  },\n  {\n    \"problem\": {\n      \"difficulty\": \"VERY_HARD\",\n      \"name\": \"Fruit Sequences\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/1428/F\",\n      \"description\": \"Zookeeper is buying a carton of fruit to feed his pet wabbit. The fruits are a sequence of apples and oranges, which is represented by a binary string $s_1s_2\\\\ldots s_n$ of length $n$. $1$ represents an apple and $0$ represents an orange.\\n\\nSince wabbit is allergic to eating oranges, Zookeeper would like to find the longest contiguous sequence of apples. Let $f(l,r)$ be the longest contiguous sequence of apples in the substring $s_{l}s_{l+1}\\\\ldots s_{r}$. \\n\\nHelp Zookeeper find $\\\\sum_{l=1}^{n} \\\\sum_{r=l}^{n} f(l,r)$, or the sum of $f$ across all substrings.\",\n      \"input\": \"The first line contains a single integer $n$ $(1 \\\\leq n \\\\leq 5 \\\\cdot 10^5)$.\\n\\nThe next line contains a binary string $s$ of length $n$ $(s_i \\\\in \\\\{0,1\\\\})$\",\n      \"output\": \"Print a single integer: $\\\\sum_{l=1}^{n} \\\\sum_{r=l}^{n} f(l,r)$.\",\n      \"note\": \"In the first test, there are ten substrings. The list of them (we let $[l,r]$ be the substring $s_l s_{l+1} \\\\ldots s_r$):  $[1,1]$: 0  $[1,2]$: 01  $[1,3]$: 011  $[1,4]$: 0110  $[2,2]$: 1  $[2,3]$: 11  $[2,4]$: 110  $[3,3]$: 1  $[3,4]$: 10  $[4,4]$: 0 \\n\\nThe lengths of the longest contiguous sequence of ones in each of these ten substrings are $0,1,2,2,1,2,2,1,1,0$ respectively. Hence, the answer is $0+1+2+2+1+2+2+1+1+0 = 12$.\",\n      \"examples\": [\n        {\n          \"input\": \"4\\n0110\",\n          \"output\": \"12\",\n          \"explanation\": \"Sum of longest contiguous ones across all substrings is 12\"\n        },\n        {\n          \"input\": \"7\\n1101001\",\n          \"output\": \"30\",\n          \"explanation\": \"Sum of longest contiguous ones across all substrings is 30\"\n        }\n      ],\n      \"raw_tags\": [\"data structures\", \"binary search\", \"dp\", \"two pointers\", \"divide and conquer\"],\n      \"tags\": [\"Sorting\", \"Amortized analysis\", \"Dynamic programming\", \"Divide and conquer\", \"Data structures\"],\n      \"skill_types\": [\"Dynamic programming\", \"Data structures\", \"Sorting\", \"Amortized analysis\"],\n      \"expected_time_complexity\": \"O(n)\",\n      \"expected_auxiliary_space\": \"O(n)\",\n      \"time_limit\": \"2 seconds\",\n      \"memory_limit\": \"256 megabytes\",\n      \"date\": \"2020-10-17\",\n      \"picture_num\": \"0\"\n    },\n    \"solutions\": [\n      {\n        \"code\": \"n = int(input().strip())\\ns = input().strip()\\ndp = [0] * (n + 1)\\ncurr = 0\\ntotal = 0\\nfor i in range(n):\\n    if s[i] == '1':\\n        curr += 1\\n        dp[i] = dp[i - curr] + curr\\n    else:\\n        curr = 0\\n        dp[i] = dp[i - 1] if i > 0 else 0\\n    total += dp[i]\\nprint(total)\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet lines = [];\\nrl.on('line', (line) => lines.push(line)).on('close', () => {\\n    const n = parseInt(lines[0]), s = lines[1];\\n    let dp = Array(n+1).fill(0), curr = 0, total = 0;\\n    for (let i = 0; i < n; i++) {\\n        if (s[i] === '1') {\\n            curr++;\\n            dp[i] = (i - curr >= 0 ? dp[i - curr] : 0) + curr;\\n        } else {\\n            curr = 0;\\n            dp[i] = i > 0 ? dp[i-1] : 0;\\n        }\\n        total += dp[i];\\n    }\\n    console.log(total);\\n});\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.Scanner;\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt();\\n        String s = sc.next();\\n        long[] dp = new long[n];\\n        long curr = 0, total = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (s.charAt(i) == '1') {\\n                curr++;\\n                int prev = (int)(i - curr);\\n                dp[i] = (prev >= 0 ? dp[prev] : 0) + curr;\\n            } else {\\n                curr = 0;\\n                dp[i] = (i > 0) ? dp[i-1] : 0;\\n            }\\n            total += dp[i];\\n        }\\n        System.out.println(total);\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\n#include <vector>\\n#include <string>\\nusing namespace std;\\nint main() {\\n    int n; \\n    string s;\\n    cin >> n >> s;\\n    vector<long long> dp(n);\\n    long long curr = 0, total = 0;\\n    for (int i = 0; i < n; i++) {\\n        if (s[i] == '1') {\\n            curr++;\\n            int prev = i - curr;\\n            dp[i] = (prev >= 0 ? dp[prev] : 0) + curr;\\n        } else {\\n            curr = 0;\\n            dp[i] = (i > 0 ? dp[i-1] : 0);\\n        }\\n        total += dp[i];\\n    }\\n    cout << total;\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  },\n  {\n    \"problem\": {\n      \"difficulty\": \"EASY\",\n      \"name\": \"Build Permutation\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/1713/C\",\n      \"description\": \"A $\\\\mathbf{0}$-indexed array $a$ of size $n$ is called good if for all valid indices $i$ ($0 \\\\le i \\\\le n-1$), $a_i + i$ is a perfect square$^\\\\dagger$.\\n\\nGiven an integer $n$. Find a permutation$^\\\\ddagger$ $p$ of $[0,1,2,\\\\ldots,n-1]$ that is good or determine that no such permutation exists.\\n\\n$^\\\\dagger$ An integer $x$ is said to be a perfect square if there exists an integer $y$ such that $x = y^2$.\\n\\n$^\\\\ddagger$ An array $b$ is a permutation of an array $a$ if $b$ consists of the elements of $a$ in arbitrary order. For example, $[4,2,3,4]$ is a permutation of $[3,2,4,4]$ while $[1,2,2]$ is not a permutation of $[1,2,3]$.\",\n      \"input\": \"The first line contains a single integer $t$ ($1 \\\\le t \\\\le 10^4$) — the number of test cases.\\n\\nThe only line of each test case contains a single integer $n$ ($1 \\\\le n \\\\le 10^5$) — the length of the permutation $p$.\\n\\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $10^5$.\",\n      \"output\": \"For each test case, output $n$ distinct integers $p_0, p_1, \\\\dots, p_{n-1}$ ($0 \\\\le p_i \\\\le n-1$) — the permutation $p$ — if the answer exists, and $-1$ otherwise.\",\n      \"note\": \"In the first test case, we have $n=3$. The array $p = [1, 0, 2]$ is good since $1 + 0 = 1^2$, $0 + 1 = 1^2$, and $2 + 2 = 2^2$\\n\\nIn the second test case, we have $n=4$. The array $p = [0, 3, 2, 1]$ is good since $0 + 0 = 0^2$, $3 + 1 = 2^2$, $2+2 = 2^2$, and $1+3 = 2^2$.\",\n      \"examples\": [\n        {\n          \"input\": \"3\\n3\\n4\\n7\",\n          \"output\": \"1 0 2\\n0 3 2 1\\n1 0 2 6 5 4 3\",\n          \"explanation\": \"Valid permutations where each element plus its index is a perfect square\"\n        }\n      ],\n      \"raw_tags\": [\"math\", \"dp\", \"constructive algorithms\"],\n      \"tags\": [\"Dynamic programming\", \"Mathematics\", \"Constructive algorithms\"],\n      \"skill_types\": [\"Dynamic programming\"],\n      \"expected_time_complexity\": \"O(n)\",\n      \"expected_auxiliary_space\": \"O(n)\",\n      \"time_limit\": \"1 second\",\n      \"memory_limit\": \"256 megabytes\",\n      \"date\": \"2022-08-06\",\n      \"picture_num\": \"0\"\n    },\n    \"solutions\": [\n      {\n        \"code\": \"import math\\n\\ndef solve():\\n    t = int(input())\\n    for _ in range(t):\\n        n = int(input())\\n        res = [-1] * n\\n        idx = n - 1\\n        while idx >= 0:\\n            s = math.ceil(math.sqrt(idx)) ** 2\\n            start = s - idx\\n            if start < 0:\\n                start = 0\\n            for i in range(start, idx + 1):\\n                res[i] = s - i\\n            idx = start - 1\\n        print(' '.join(map(str, res)))\\n\\nsolve()\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet lines = [], t, idx = 0;\\nrl.on('line', (line) => lines.push(line)).on('close', () => {\\n    t = parseInt(lines[0]); idx = 1;\\n    while (t--) {\\n        const n = parseInt(lines[idx++]);\\n        let res = Array(n).fill(-1), pos = n - 1;\\n        while (pos >= 0) {\\n            const s = Math.ceil(Math.sqrt(pos)) ** 2;\\n            let start = s - pos;\\n            if (start < 0) start = 0;\\n            for (let i = start; i <= pos; i++) res[i] = s - i;\\n            pos = start - 1;\\n        }\\n        console.log(res.join(' '));\\n    }\\n});\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.Scanner;\\nimport java.util.Arrays;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int t = sc.nextInt();\\n        while (t-- > 0) {\\n            int n = sc.nextInt();\\n            int[] res = new int[n];\\n            Arrays.fill(res, -1);\\n            int idx = n - 1;\\n            while (idx >= 0) {\\n                int s = (int) Math.pow(Math.ceil(Math.sqrt(idx)), 2);\\n                int start = s - idx;\\n                if (start < 0) start = 0;\\n                for (int i = start; i <= idx; i++) {\\n                    res[i] = s - i;\\n                }\\n                idx = start - 1;\\n            }\\n            for (int i = 0; i < n; i++) {\\n                System.out.print(res[i] + \\\" \\\");\\n            }\\n            System.out.println();\\n        }\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\n#include <vector>\\n#include <cmath>\\nusing namespace std;\\n\\nint main() {\\n    int t;\\n    cin >> t;\\n    while (t--) {\\n        int n;\\n        cin >> n;\\n        vector<int> res(n, -1);\\n        int idx = n - 1;\\n        while (idx >= 0) {\\n            int s = pow(ceil(sqrt(idx)), 2);\\n            int start = s - idx;\\n            if (start < 0) start = 0;\\n            for (int i = start; i <= idx; i++) {\\n                res[i] = s - i;\\n            }\\n            idx = start - 1;\\n        }\\n        for (int x : res) {\\n            cout << x << \\\" \\\";\\n        }\\n        cout << endl;\\n    }\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  },\n  {\n    \"problem\": {\n      \"difficulty\": \"HARD\",\n      \"name\": \"Box Pushing\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/1494/C\",\n      \"description\": \"You are playing a game similar to Sokoban on an infinite number line. The game is discrete, so you only consider integer positions on the line.\\n\\nYou start on a position $0$. There are $n$ boxes, the $i$-th box is on a position $a_i$. All positions of the boxes are distinct. There are also $m$ special positions, the $j$-th position is $b_j$. All the special positions are also distinct.\\n\\nIn one move you can go one position to the left or to the right. If there is a box in the direction of your move, then you push the box to the next position in that direction. If the next position is taken by another box, then that box is also pushed to the next position, and so on. You can't go through the boxes. You can't pull the boxes towards you.\\n\\nYou are allowed to perform any number of moves (possibly, zero). Your goal is to place as many boxes on special positions as possible. Note that some boxes can be initially placed on special positions.\",\n      \"input\": \"The first line contains a single integer $t$ ($1 \\\\le t \\\\le 1000$) — the number of testcases.\\n\\nThen descriptions of $t$ testcases follow.\\n\\nThe first line of each testcase contains two integers $n$ and $m$ ($1 \\\\le n, m \\\\le 2 \\\\cdot 10^5$) — the number of boxes and the number of special positions, respectively.\\n\\nThe second line of each testcase contains $n$ distinct integers in the increasing order $a_1, a_2, \\\\dots, a_n$ ($-10^9 \\\\le a_1 < a_2 < \\\\dots < a_n \\\\le 10^9$; $a_i \\\\neq 0$) — the initial positions of the boxes.\\n\\nThe third line of each testcase contains $m$ distinct integers in the increasing order $b_1, b_2, \\\\dots, b_m$ ($-10^9 \\\\le b_1 < b_2 < \\\\dots < b_m \\\\le 10^9$; $b_i \\\\neq 0$) — the special positions.\\n\\nThe sum of $n$ over all testcases doesn't exceed $2 \\\\cdot 10^5$. The sum of $m$ over all testcases doesn't exceed $2 \\\\cdot 10^5$.\",\n      \"output\": \"For each testcase print a single integer — the maximum number of boxes that can be placed on special positions.\",\n      \"note\": \"In the first testcase you can go $5$ to the right: the box on position $1$ gets pushed to position $6$ and the box on position $5$ gets pushed to position $7$. Then you can go $6$ to the left to end up on position $-1$ and push a box to $-2$. At the end, the boxes are on positions $[-2, 6, 7, 11, 15]$, respectively. Among them positions $[-2, 6, 7, 15]$ are special, thus, the answer is $4$.\\n\\nIn the second testcase you can push the box from $-1$ to $-10^9$, then the box from $1$ to $10^9$ and obtain the answer $2$.\\n\\nThe third testcase showcases that you are not allowed to pull the boxes, thus, you can't bring them closer to special positions.\\n\\nIn the fourth testcase all the boxes are already on special positions, so you can do nothing and still obtain the answer $3$.\\n\\nIn the fifth testcase there are fewer special positions than boxes. You can move either $8$ or $9$ to the right to have some box on position $10$.\",\n      \"examples\": [\n        {\n          \"input\": \"5\\n5 6\\n-1 1 5 11 15\\n-4 -3 -2 6 7 15\\n2 2\\n-1 1\\n-1000000000 1000000000\\n2 2\\n-1000000000 1000000000\\n-1 1\\n3 5\\n-1 1 2\\n-2 -1 1 2 5\\n2 1\\n1 2\\n10\",\n          \"output\": \"4\\n2\\n0\\n3\\n1\",\n          \"explanation\": \"Maximum boxes that can be placed on special positions for each test case\"\n        }\n      ],\n      \"raw_tags\": [\"greedy\", \"implementation\", \"binary search\", \"dp\", \"two pointers\"],\n      \"tags\": [\"Sorting\", \"Amortized analysis\", \"Implementation\", \"Greedy algorithms\", \"Dynamic programming\"],\n      \"skill_types\": [\"Dynamic programming\", \"Sorting\", \"Amortized analysis\", \"Greedy algorithms\"],\n      \"expected_time_complexity\": \"O(n + m)\",\n      \"expected_auxiliary_space\": \"O(n + m)\",\n      \"time_limit\": \"2 seconds\",\n      \"memory_limit\": \"256 megabytes\",\n      \"date\": \"2021-03-02\",\n      \"picture_num\": \"0\"\n    },\n    \"solutions\": [\n      {\n        \"code\": \"import bisect\\n\\ndef solve_direction(boxes, specs):\\n    if not boxes or not specs:\\n        return 0\\n    n, m = len(boxes), len(specs)\\n    prefix = [0] * (m + 1)\\n    for i in range(m-1, -1, -1):\\n        prefix[i] = prefix[i+1] + (1 if bisect.bisect_left(boxes, specs[i]) < n and boxes[bisect.bisect_left(boxes, specs[i])] == specs[i] else 0)\\n    ans = prefix[0]\\n    j = 0\\n    for i in range(m):\\n        while j < n and boxes[j] <= specs[i]:\\n            j += 1\\n        if j == 0:\\n            continue\\n        last_box = specs[i] - j + 1\\n        pos = bisect.bisect_left(specs, last_box)\\n        ans = max(ans, i - pos + 1 + prefix[i+1])\\n    return ans\\n\\nt = int(input())\\nfor _ in range(t):\\n    n, m = map(int, input().split())\\n    a = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    pos_boxes = [x for x in a if x > 0]\\n    pos_specs = [x for x in b if x > 0]\\n    neg_boxes = [-x for x in a if x < 0][::-1]\\n    neg_specs = [-x for x in b if x < 0][::-1]\\n    print(solve_direction(pos_boxes, pos_specs) + solve_direction(neg_boxes, neg_specs))\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet lines = [], t, idx = 0;\\n\\nfunction solveDirection(boxes, specs) {\\n    if (!boxes.length || !specs.length) return 0;\\n    const n = boxes.length, m = specs.length;\\n    let prefix = Array(m+1).fill(0);\\n    for (let i = m-1; i >= 0; i--) {\\n        prefix[i] = prefix[i+1] + (boxes.includes(specs[i]) ? 1 : 0);\\n    }\\n    let ans = prefix[0], j = 0;\\n    for (let i = 0; i < m; i++) {\\n        while (j < n && boxes[j] <= specs[i]) j++;\\n        if (j === 0) continue;\\n        let lastBox = specs[i] - j + 1;\\n        let pos = specs.findIndex(x => x >= lastBox);\\n        if (pos === -1) pos = m;\\n        ans = Math.max(ans, i - pos + 1 + prefix[i+1]);\\n    }\\n    return ans;\\n}\\n\\nrl.on('line', (line) => lines.push(line)).on('close', () => {\\n    t = parseInt(lines[0]); idx = 1;\\n    while (t--) {\\n        let [n, m] = lines[idx++].split(' ').map(Number);\\n        let a = lines[idx++].split(' ').map(Number);\\n        let b = lines[idx++].split(' ').map(Number);\\n        let posBoxes = a.filter(x => x > 0), posSpecs = b.filter(x => x > 0);\\n        let negBoxes = a.filter(x => x < 0).map(x => -x).reverse();\\n        let negSpecs = b.filter(x => x < 0).map(x => -x).reverse();\\n        console.log(solveDirection(posBoxes, posSpecs) + solveDirection(negBoxes, negSpecs));\\n    }\\n});\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.*;\\n\\npublic class Main {\\n    static int solveDirection(List<Integer> boxes, List<Integer> specs) {\\n        if (boxes.isEmpty() || specs.isEmpty()) return 0;\\n        int n = boxes.size(), m = specs.size();\\n        int[] prefix = new int[m+1];\\n        for (int i = m-1; i >= 0; i--) {\\n            prefix[i] = prefix[i+1] + (Collections.binarySearch(boxes, specs.get(i)) >= 0 ? 1 : 0);\\n        }\\n        int ans = prefix[0], j = 0;\\n        for (int i = 0; i < m; i++) {\\n            while (j < n && boxes.get(j) <= specs.get(i)) j++;\\n            if (j == 0) continue;\\n            int lastBox = specs.get(i) - j + 1;\\n            int pos = Collections.binarySearch(specs, lastBox);\\n            if (pos < 0) pos = -pos - 1;\\n            ans = Math.max(ans, i - pos + 1 + prefix[i+1]);\\n        }\\n        return ans;\\n    }\\n    \\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int t = sc.nextInt();\\n        while (t-- > 0) {\\n            int n = sc.nextInt(), m = sc.nextInt();\\n            List<Integer> posBoxes = new ArrayList<>(), negBoxes = new ArrayList<>();\\n            List<Integer> posSpecs = new ArrayList<>(), negSpecs = new ArrayList<>();\\n            for (int i = 0; i < n; i++) {\\n                int x = sc.nextInt();\\n                if (x > 0) posBoxes.add(x); else negBoxes.add(-x);\\n            }\\n            for (int i = 0; i < m; i++) {\\n                int x = sc.nextInt();\\n                if (x > 0) posSpecs.add(x); else negSpecs.add(-x);\\n            }\\n            Collections.sort(posBoxes); Collections.sort(negBoxes);\\n            Collections.sort(posSpecs); Collections.sort(negSpecs);\\n            System.out.println(solveDirection(posBoxes, posSpecs) + solveDirection(negBoxes, negSpecs));\\n        }\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\n#include <vector>\\n#include <algorithm>\\nusing namespace std;\\n\\nint solveDirection(vector<int>& boxes, vector<int>& specs) {\\n    if (boxes.empty() || specs.empty()) return 0;\\n    int n = boxes.size(), m = specs.size();\\n    vector<int> prefix(m+1, 0);\\n    for (int i = m-1; i >= 0; i--) {\\n        prefix[i] = prefix[i+1] + (binary_search(boxes.begin(), boxes.end(), specs[i]) ? 1 : 0);\\n    }\\n    int ans = prefix[0], j = 0;\\n    for (int i = 0; i < m; i++) {\\n        while (j < n && boxes[j] <= specs[i]) j++;\\n        if (j == 0) continue;\\n        int lastBox = specs[i] - j + 1;\\n        int pos = lower_bound(specs.begin(), specs.end(), lastBox) - specs.begin();\\n        ans = max(ans, i - pos + 1 + prefix[i+1]);\\n    }\\n    return ans;\\n}\\n\\nint main() {\\n    int t;\\n    cin >> t;\\n    while (t--) {\\n        int n, m;\\n        cin >> n >> m;\\n        vector<int> a(n), b(m);\\n        vector<int> posBoxes, negBoxes, posSpecs, negSpecs;\\n        for (int i = 0; i < n; i++) {\\n            cin >> a[i];\\n            if (a[i] > 0) posBoxes.push_back(a[i]); else negBoxes.push_back(-a[i]);\\n        }\\n        for (int i = 0; i < m; i++) {\\n            cin >> b[i];\\n            if (b[i] > 0) posSpecs.push_back(b[i]); else negSpecs.push_back(-b[i]);\\n        }\\n        sort(posBoxes.begin(), posBoxes.end());\\n        sort(negBoxes.begin(), negBoxes.end());\\n        sort(posSpecs.begin(), posSpecs.end());\\n        sort(negSpecs.begin(), negSpecs.end());\\n        cout << solveDirection(posBoxes, posSpecs) + solveDirection(negBoxes, negSpecs) << endl;\\n    }\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  },\n  {\n    \"problem\": {\n      \"difficulty\": \"MEDIUM_HARD\",\n      \"name\": \"Bargain\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/1422/C\",\n      \"description\": \"Sometimes it is not easy to come to an agreement in a bargain. Right now Sasha and Vova can't come to an agreement: Sasha names a price as high as possible, then Vova wants to remove as many digits from the price as possible. In more details, Sasha names some integer price $n$, Vova removes a non-empty substring of (consecutive) digits from the price, the remaining digits close the gap, and the resulting integer is the price.\\n\\nFor example, is Sasha names $1213121$, Vova can remove the substring $1312$, and the result is $121$.\\n\\nIt is allowed for result to contain leading zeros. If Vova removes all digits, the price is considered to be $0$.\\n\\nSasha wants to come up with some constraints so that Vova can't just remove all digits, but he needs some arguments supporting the constraints. To start with, he wants to compute the sum of all possible resulting prices after Vova's move.\\n\\nHelp Sasha to compute this sum. Since the answer can be very large, print it modulo $10^9 + 7$.\",\n      \"input\": \"The first and only line contains a single integer $n$ ($1 \\\\le n < 10^{10^5}$).\",\n      \"output\": \"In the only line print the required sum modulo $10^9 + 7$.\",\n      \"note\": \"Consider the first example.\\n\\nVova can choose to remove $1$, $0$, $7$, $10$, $07$, or $107$. The results are $07$, $17$, $10$, $7$, $1$, $0$. Their sum is $42$.\",\n      \"examples\": [\n        {\n          \"input\": \"107\",\n          \"output\": \"42\",\n          \"explanation\": \"Sum of all possible resulting prices is 42\"\n        },\n        {\n          \"input\": \"100500100500\",\n          \"output\": \"428101984\",\n          \"explanation\": \"Sum modulo 10^9+7 is 428101984\"\n        }\n      ],\n      \"raw_tags\": [\"combinatorics\", \"math\", \"dp\"],\n      \"tags\": [\"Dynamic programming\", \"Combinatorics\", \"Mathematics\"],\n      \"skill_types\": [\"Dynamic programming\"],\n      \"expected_time_complexity\": \"O(n)\",\n      \"expected_auxiliary_space\": \"O(1)\",\n      \"time_limit\": \"1 second\",\n      \"memory_limit\": \"256 megabytes\",\n      \"date\": \"2020-10-04\",\n      \"picture_num\": \"0\"\n    },\n    \"solutions\": [\n      {\n        \"code\": \"MOD = 10**9 + 7\\ns = input().strip()\\nn = len(s)\\nans = 0\\npow10 = 1\\nfor i in range(n-1, -1, -1):\\n    digit = int(s[i])\\n    left = i * (i+1) // 2\\n    ans = (ans + digit * pow10 * left) % MOD\\n    ans = (ans + digit * pow10 * (n-1-i)) % MOD\\n    pow10 = (pow10 * 10) % MOD\\nprint(ans)\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const MOD = BigInt(1e9 + 7);\\nlet s = require('fs').readFileSync(0, 'utf8').trim();\\nlet n = s.length;\\nlet ans = 0n, pow10 = 1n;\\nfor (let i = n-1; i >= 0; i--) {\\n    let digit = BigInt(parseInt(s[i]));\\n    let left = BigInt(i * (i+1) / 2);\\n    ans = (ans + digit * pow10 % MOD * left % MOD) % MOD;\\n    ans = (ans + digit * pow10 % MOD * BigInt(n-1-i) % MOD) % MOD;\\n    pow10 = (pow10 * 10n) % MOD;\\n}\\nconsole.log(Number(ans));\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.Scanner;\\n\\npublic class Main {\\n    static final long MOD = 1000000007;\\n    \\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        String s = sc.next();\\n        int n = s.length();\\n        long ans = 0, pow10 = 1;\\n        for (int i = n-1; i >= 0; i--) {\\n            long digit = s.charAt(i) - '0';\\n            long left = (long) i * (i+1) / 2;\\n            ans = (ans + digit * pow10 % MOD * left % MOD) % MOD;\\n            ans = (ans + digit * pow10 % MOD * (n-1-i) % MOD) % MOD;\\n            pow10 = (pow10 * 10) % MOD;\\n        }\\n        System.out.println(ans);\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\n#include <string>\\nusing namespace std;\\n\\nconst long long MOD = 1e9 + 7;\\n\\nint main() {\\n    string s;\\n    cin >> s;\\n    int n = s.length();\\n    long long ans = 0, pow10 = 1;\\n    for (int i = n-1; i >= 0; i--) {\\n        long long digit = s[i] - '0';\\n        long long left = 1LL * i * (i+1) / 2;\\n        ans = (ans + digit * pow10 % MOD * left % MOD) % MOD;\\n        ans = (ans + digit * pow10 % MOD * (n-1-i) % MOD) % MOD;\\n        pow10 = (pow10 * 10) % MOD;\\n    }\\n    cout << ans;\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  },\n  {\n    \"problem\": {\n      \"difficulty\": \"VERY_HARD\",\n      \"name\": \"Number Game\",\n      \"source\": \"codeforces\",\n      \"url\": \"https://codeforces.com/problemset/problem/995/D\",\n      \"description\": \"Allen and Bessie are playing a simple number game. They both know a function $f: \\\\{0, 1\\\\}^n \\\\to \\\\mathbb{R}$, i. e. the function takes $n$ binary arguments and returns a real value. At the start of the game, the variables $x_1, x_2, \\\\dots, x_n$ are all set to $-1$. Each round, with equal probability, one of Allen or Bessie gets to make a move. A move consists of picking an $i$ such that $x_i = -1$ and either setting $x_i \\\\to 0$ or $x_i \\\\to 1$.\\n\\nAfter $n$ rounds all variables are set, and the game value resolves to $f(x_1, x_2, \\\\dots, x_n)$. Allen wants to maximize the game value, and Bessie wants to minimize it.\\n\\nYour goal is to help Allen and Bessie find the expected game value! They will play $r+1$ times though, so between each game, exactly one value of $f$ changes. In other words, between rounds $i$ and $i+1$ for $1 \\\\le i \\\\le r$, $f(z_1, \\\\dots, z_n) \\\\to g_i$ for some $(z_1, \\\\dots, z_n) \\\\in \\\\{0, 1\\\\}^n$. You are to find the expected game value in the beginning and after each change.\",\n      \"input\": \"The first line contains two integers $n$ and $r$ ($1 \\\\le n \\\\le 18$, $0 \\\\le r \\\\le 2^{18}$).\\n\\nThe next line contains $2^n$ integers $c_0, c_1, \\\\dots, c_{2^n-1}$ ($0 \\\\le c_i \\\\le 10^9$), denoting the initial values of $f$. More specifically, $f(x_0, x_1, \\\\dots, x_{n-1}) = c_x$, if $x = \\\\overline{x_{n-1} \\\\ldots x_0}$ in binary.\\n\\nEach of the next $r$ lines contains two integers $z$ and $g$ ($0 \\\\le z \\\\le 2^n - 1$, $0 \\\\le g \\\\le 10^9$). If $z = \\\\overline{z_{n-1} \\\\dots z_0}$ in binary, then this means to set $f(z_0, \\\\dots, z_{n-1}) \\\\to g$.\",\n      \"output\": \"Print $r+1$ lines, the $i$-th of which denotes the value of the game $f$ during the $i$-th round. Your answer must have absolute or relative error within $10^{-6}$.\\n\\nFormally, let your answer be $a$, and the jury's answer be $b$. Your answer is considered correct if $\\\\frac{|a - b|}{\\\\max{(1, |b|)}} \\\\le 10^{-6}$.\",\n      \"note\": \"Consider the second test case. If Allen goes first, he will set $x_1 \\\\to 1$, so the final value will be $3$. If Bessie goes first, then she will set $x_1 \\\\to 0$ so the final value will be $2$. Thus the answer is $2.5$.\\n\\nIn the third test case, the game value will always be $1$ regardless of Allen and Bessie's play.\",\n      \"examples\": [\n        {\n          \"input\": \"2 2\\n0 1 2 3\\n2 5\\n0 4\",\n          \"output\": \"1.500000\\n2.250000\\n3.250000\",\n          \"explanation\": \"Expected game values after each update\"\n        },\n        {\n          \"input\": \"1 0\\n2 3\",\n          \"output\": \"2.500000\",\n          \"explanation\": \"Single expected value calculation\"\n        }\n      ],\n      \"raw_tags\": [\"math\"],\n      \"tags\": [\"Mathematics\"],\n      \"skill_types\": [],\n      \"expected_time_complexity\": \"O(r + 2^n)\",\n      \"expected_auxiliary_space\": \"O(2^n)\",\n      \"time_limit\": null,\n      \"memory_limit\": null,\n      \"date\": \"2019-12-31\",\n      \"picture_num\": null\n    },\n    \"solutions\": [\n      {\n        \"code\": \"n, r = map(int, input().split())\\narr = list(map(int, input().split()))\\ntotal = sum(arr)\\nprint(f\\\"{total / len(arr):.6f}\\\")\\nfor _ in range(r):\\n    z, g = map(int, input().split())\\n    total += g - arr[z]\\n    arr[z] = g\\n    print(f\\\"{total / len(arr):.6f}\\\")\",\n        \"language\": \"python\",\n        \"solutionNumber\": 1\n      },\n      {\n        \"code\": \"const readline = require('readline');\\nconst rl = readline.createInterface({ input: process.stdin, output: process.stdout });\\nlet lines = [], n, r, arr, total;\\nrl.on('line', (line) => lines.push(line)).on('close', () => {\\n    [n, r] = lines[0].split(' ').map(Number);\\n    arr = lines[1].split(' ').map(Number);\\n    total = arr.reduce((a, b) => a + b, 0);\\n    console.log((total / arr.length).toFixed(6));\\n    for (let i = 2; i < 2 + r; i++) {\\n        let [z, g] = lines[i].split(' ').map(Number);\\n        total += g - arr[z];\\n        arr[z] = g;\\n        console.log((total / arr.length).toFixed(6));\\n    }\\n});\",\n        \"language\": \"javascript\",\n        \"solutionNumber\": 2\n      },\n      {\n        \"code\": \"import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner sc = new Scanner(System.in);\\n        int n = sc.nextInt(), r = sc.nextInt();\\n        long total = 0;\\n        int[] arr = new int[1 << n];\\n        for (int i = 0; i < (1 << n); i++) {\\n            arr[i] = sc.nextInt();\\n            total += arr[i];\\n        }\\n        System.out.printf(\\\"%.6f\\\\n\\\", total / (double)(1 << n));\\n        for (int i = 0; i < r; i++) {\\n            int z = sc.nextInt(), g = sc.nextInt();\\n            total += g - arr[z];\\n            arr[z] = g;\\n            System.out.printf(\\\"%.6f\\\\n\\\", total / (double)(1 << n));\\n        }\\n    }\\n}\",\n        \"language\": \"java\",\n        \"solutionNumber\": 3\n      },\n      {\n        \"code\": \"#include <iostream>\\n#include <iomanip>\\n#include <vector>\\nusing namespace std;\\n\\nint main() {\\n    int n, r;\\n    cin >> n >> r;\\n    vector<int> arr(1 << n);\\n    long long total = 0;\\n    for (int i = 0; i < (1 << n); i++) {\\n        cin >> arr[i];\\n        total += arr[i];\\n    }\\n    cout << fixed << setprecision(6) << total / (double)(1 << n) << endl;\\n    for (int i = 0; i < r; i++) {\\n        int z, g;\\n        cin >> z >> g;\\n        total += g - arr[z];\\n        arr[z] = g;\\n        cout << fixed << setprecision(6) << total / (double)(1 << n) << endl;\\n    }\\n    return 0;\\n}\",\n        \"language\": \"cpp\",\n        \"solutionNumber\": 4\n      }\n    ]\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "http://localhost:3000/api/problems/bulk-insert"
							},
							"response": []
						}
					]
				},
				{
					"name": "Filters",
					"item": [
						{
							"name": "FILTER BY DIFFICULTY",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "http://localhost:3000/api/problems/filter/difficulty/EASY"
							},
							"response": []
						},
						{
							"name": "FILTER BY TAGS (Single Tag)",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/problems/filter/tags?tags=Arrays",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"problems",
										"filter",
										"tags"
									],
									"query": [
										{
											"key": "tags",
											"value": "Arrays"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "FILTER BY TAGS (Multiple Tags)",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/problems/filter/tags?tags=Dynamic programming,Combinatorics,Implementation",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"problems",
										"filter",
										"tags"
									],
									"query": [
										{
											"key": "tags",
											"value": "Dynamic programming,Combinatorics,Implementation"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SEARCH BY NAME",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/problems/search?q=bargain",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"problems",
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "bargain"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Single Submission",
			"item": [
				{
					"name": "Create Submission",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZTExNjA5MGNlMDY5NDFiY2UyOWIyNCIsIm5hbWUiOiJTdHVkZW50MiBVc2VyIiwiZW1haWwiOiJzdHVkZW50MkBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJGZWc2pEQ3JQbzJycmJ6bTZHRnBTVk9BbzNEZ0IxWmUuOGs2ZU1POC5mVTFrdVJCaTFqd0Q2IiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJTdHVkZW50Iiwic3VibWlzc2lvbnMiOltdLCJwcmVmZXJyZWREaWZmaWN1bHR5IjoiRUFTWSIsInNvbHZlZFByb2JsZW1zIjpbXSwicHJlZmVycmVkVGFncyI6W10sImNyZWF0ZWRBdCI6IjIwMjUtMTAtMDRUMTI6NDE6NDUuNDkzWiIsInVwZGF0ZWRBdCI6IjIwMjUtMTAtMDRUMTI6NDE6NDUuNDkzWiIsIl9fdiI6MH0sImlhdCI6MTc1OTU4MTcyMSwiZXhwIjoxNzYwMTg2NTIxfQ.wXQ5igBjozkktrzVvzbY54_WFIEBJxFsJe20fc-J-UM"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"language\": \"python\",\n  \"version\": \"3.12.0\",\n  \"code\": \"import math\\n\\ndef solve():\\n    t = int(input())\\n    for _ in range(t):\\n        n = int(input())\\n        res = [-1] * n\\n        idx = n - 1\\n        while idx >= 0:\\n            s = math.ceil(math.sqrt(idx)) ** 2\\n            start = s - idx\\n            if start < 0:\\n                start = 0\\n            for i in range(start, idx + 1):\\n                res[i] = s - i\\n            idx = start - 1\\n        print(' '.join(map(str, res)))\\n\\nsolve()\",\n  \"problemId\": \"68e106b20ce06941bce29a8b\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/submissions"
					},
					"response": []
				},
				{
					"name": "Create Submission Time 1",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZTEyMDUyMmU0Nzc3MDFjMTY0ZDhkNiIsIm5hbWUiOiJTdHVkZW50NCBVc2VyIiwiZW1haWwiOiJzdHVkZW50NEBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJEFjWHpXeU9QdEk1Y2JWekc3c1cxR09rWUZPckNadGRCb3JqWWVPUlVLR0phSmRZbFB3eWFDIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJTdHVkZW50Iiwic3VibWlzc2lvbnMiOltdLCJwcmVmZXJyZWREaWZmaWN1bHR5IjoiRUFTWSIsInNvbHZlZFByb2JsZW1zIjpbXSwic29sdmVkQ291bnQiOjAsImRpZmZpY3VsdHlTY29yZVN1bSI6MCwicHJlZmVycmVkVGFncyI6W10sImNyZWF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsInVwZGF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsIl9fdiI6MH0sImlhdCI6MTc1OTU4NDM1MSwiZXhwIjoxNzYwMTg5MTUxfQ.1YChQ0eRWTBmGhp1ijh5oWMzLfqQFkC7BE9QsHGATeM"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"language\": \"python\",\n  \"version\": \"3.12.0\",\n  \"code\": \"n = int(input())\\ns = input().strip()\\ntotal_substrings = n * (n + 1) // 2\\nres = 0\\ncount = 0\\nfor c in s:\\n    if c == '1':\\n        count += 1\\n    else:\\n        count = 0\\n    res += count\\nprint(total_substrings + res)\",\n  \"problemId\": \"68e106b20ce06941bce29a7d\",\n  \"elapsedTimeMs\": 180000\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/submissions"
					},
					"response": []
				},
				{
					"name": "Create Submission Time 2",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZGZkM2QyYzI4ZTgwN2QyOGVhNDBhMSIsIm5hbWUiOiJBZG1pbjMgVXNlciIsImVtYWlsIjoiYWRtaW4zQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkMUpxLjRITERSU0E1amZ1cjVEQjZ1ZTZ2b3h5UWZHa0VicnVpa1ZnWlpDdGkxcDJZdEZiYzIiLCJwcm9maWxlSW1hZ2UiOiJodHRwczovL2V4YW1wbGUuY29tL2FkbWluLnBuZyIsInN0YXR1cyI6IkFkbWluIiwic3VibWlzc2lvbnMiOltdLCJjcmVhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJ1cGRhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJfX3YiOjB9LCJpYXQiOjE3NTk0OTk4MTcsImV4cCI6MTc2MDEwNDYxN30.lsdJDJtKQLK6xCplpKMMsQpMOefYUYg7kcBSInKpn_g"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"language\": \"python\",\n  \"version\": \"3.12.0\",\n  \"code\": \"print(input())\",\n  \"problemId\": \"68df84abb7e93d5a30299a26\",\n  \"startedAt\": \"2025-10-03T14:20:00.000Z\",\n  \"endedAt\": \"2025-10-03T14:22:15.295Z\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/submissions"
					},
					"response": []
				},
				{
					"name": "get Submissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZTEyMDUyMmU0Nzc3MDFjMTY0ZDhkNiIsIm5hbWUiOiJTdHVkZW50NCBVc2VyIiwiZW1haWwiOiJzdHVkZW50NEBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjoiJDJhJDEwJEFjWHpXeU9QdEk1Y2JWekc3c1cxR09rWUZPckNadGRCb3JqWWVPUlVLR0phSmRZbFB3eWFDIiwicHJvZmlsZUltYWdlIjoiaHR0cHM6Ly9leGFtcGxlLmNvbS9hZG1pbi5wbmciLCJzdGF0dXMiOiJTdHVkZW50Iiwic3VibWlzc2lvbnMiOltdLCJwcmVmZXJyZWREaWZmaWN1bHR5IjoiRUFTWSIsInNvbHZlZFByb2JsZW1zIjpbXSwic29sdmVkQ291bnQiOjAsImRpZmZpY3VsdHlTY29yZVN1bSI6MCwicHJlZmVycmVkVGFncyI6W10sImNyZWF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsInVwZGF0ZWRBdCI6IjIwMjUtMTAtMDRUMTM6MjU6MzguOTc2WiIsIl9fdiI6MH0sImlhdCI6MTc1OTU4NDM1MSwiZXhwIjoxNzYwMTg5MTUxfQ.1YChQ0eRWTBmGhp1ijh5oWMzLfqQFkC7BE9QsHGATeM"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:3000/api/submissions"
					},
					"response": []
				},
				{
					"name": "get Single Submissions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZGZkM2QyYzI4ZTgwN2QyOGVhNDBhMSIsIm5hbWUiOiJBZG1pbjMgVXNlciIsImVtYWlsIjoiYWRtaW4zQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkMUpxLjRITERSU0E1amZ1cjVEQjZ1ZTZ2b3h5UWZHa0VicnVpa1ZnWlpDdGkxcDJZdEZiYzIiLCJwcm9maWxlSW1hZ2UiOiJodHRwczovL2V4YW1wbGUuY29tL2FkbWluLnBuZyIsInN0YXR1cyI6IkFkbWluIiwic3VibWlzc2lvbnMiOltdLCJjcmVhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJ1cGRhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJfX3YiOjB9LCJpYXQiOjE3NTk0OTk4MTcsImV4cCI6MTc2MDEwNDYxN30.lsdJDJtKQLK6xCplpKMMsQpMOefYUYg7kcBSInKpn_g"
							}
						},
						"method": "GET",
						"header": [],
						"url": "http://localhost:3000/api/submissions/68dfd63ec28e807d28ea40aa"
					},
					"response": []
				},
				{
					"name": "update Submission",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJVc2VyIjp7Il9pZCI6IjY4ZGZkM2QyYzI4ZTgwN2QyOGVhNDBhMSIsIm5hbWUiOiJBZG1pbjMgVXNlciIsImVtYWlsIjoiYWRtaW4zQGV4YW1wbGUuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkMUpxLjRITERSU0E1amZ1cjVEQjZ1ZTZ2b3h5UWZHa0VicnVpa1ZnWlpDdGkxcDJZdEZiYzIiLCJwcm9maWxlSW1hZ2UiOiJodHRwczovL2V4YW1wbGUuY29tL2FkbWluLnBuZyIsInN0YXR1cyI6IkFkbWluIiwic3VibWlzc2lvbnMiOltdLCJjcmVhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJ1cGRhdGVkQXQiOiIyMDI1LTEwLTAzVDEzOjQ2OjU4LjQzM1oiLCJfX3YiOjB9LCJpYXQiOjE3NTk0OTk4MTcsImV4cCI6MTc2MDEwNDYxN30.lsdJDJtKQLK6xCplpKMMsQpMOefYUYg7kcBSInKpn_g"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"note\": \"This is my updated note\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "http://localhost:3000/api/submissions/68dfd63ec28e807d28ea40aa"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"requests": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}